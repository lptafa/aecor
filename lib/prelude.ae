@compiler c_include "stdio.h"
@compiler c_include "stdlib.h"
@compiler c_include "stdbool.h"
@compiler c_include "stdint.h"
@compiler c_include "string.h"
@compiler c_include "errno.h"
@compiler c_embed_header "lib/prelude.h"

def malloc(size: i32): untyped_ptr extern
def realloc(old: untyped_ptr, size: i32): untyped_ptr extern
def calloc(size: i32, num: i32): untyped_ptr extern
def free(ptr: untyped_ptr) extern

let errno: i32 extern

let SEEK_END: i32 extern
let SEEK_SET: i32 extern
let SEEK_CUR: i32 extern

// TODO: Add nicer wrappers around these
def fopen(path: string, mode: string): &File extern
def fread(ptr: untyped_ptr, size: i32, num: i32, file: &File) extern
def fwrite(ptr: untyped_ptr, size: i32, num: i32, file: &File) extern

struct File extern("FILE")
def File::close(&this) extern("fclose")
def File::tell(&this): i32 extern("ftell")
def File::seek(&this, offset: i32, whence: i32): i32 extern("fseek")

def File::open(path: string, mode: string): &File {
    let file = fopen(path, mode)
    if not file? {
        println("Error opening file '%s': %s", path, strerror(errno))
        exit(1)
    }
    return file
}

def File::exists(path: string): bool {
    let file = fopen(path, "r")
    if not file? {
        return false
    }
    file.close()
    return true
}

def File::slurp(&this): string {
    let pos = .tell()
    .seek(0, SEEK_END)
    let size = .tell()
    .seek(pos, SEEK_SET)
    let buf = calloc((size+1), sizeof(char))
    fread(buf, 1, size, this)
    .seek(pos, SEEK_SET)
    return buf as string
}

def File::puts(&this, str: string) {
    fwrite(str , 1, str.len(), this)
}

def exit(code: i32) exits extern

def string::len(this): i32 extern("strlen")
def string::compare(this, str2: string): i32 extern("strcmp")
def string::compare_n(this, str2: string, n: i32): i32 extern("strncmp")
def string::copy_from(this, src: string): string extern("strcpy")
def string::copy_n_from(this, src: string, n: i32): string extern("strncpy")
def string::copy(this): string extern("strdup")
def string::concat(this, src: string): string extern("strcat")

def string::starts_with(this, prefix: string): bool {
    let prefix_len = prefix.len()
    if .len() < prefix_len {
        return false
    }
    return .compare_n(prefix, prefix_len) == 0
}

def string::eq(this, str2: string): bool {
    return this.compare(str2) == 0
}

def string::substring(this, start: i32, len: i32): string {
    let new_str = calloc(len + 1, sizeof(char)) as string
    new_str.copy_n_from(this + start, len)
    return new_str
}

def strerror(errno: i32): string extern

def puts(str: string) extern
def system(str: string): i32 extern