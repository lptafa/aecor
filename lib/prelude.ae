@compiler c_include "stdio.h"
@compiler c_include "stdlib.h"
@compiler c_include "stdbool.h"
@compiler c_include "stdint.h"
@compiler c_include "string.h"
@compiler c_include "errno.h"
@compiler c_embed_header "lib/prelude.h"

@compiler c_include "ctype.h"
def is_alpha(c: char): bool extern("isalpha")
def is_digit(c: char): bool extern("isdigit")
def is_alnum(c: char): bool extern("isalnum")
def is_printable(c: char): bool extern("isprint")

def malloc(size: i32): untyped_ptr extern
def realloc(old: untyped_ptr, size: i32): untyped_ptr extern
def calloc(size: i32, num: i32): untyped_ptr extern
def free(ptr: untyped_ptr) extern

let errno: i32 extern

let SEEK_END: i32 extern
let SEEK_SET: i32 extern
let SEEK_CUR: i32 extern

struct File extern("FILE")
def File::close(&this) extern("fclose")
def File::tell(&this): i32 extern("ftell")
def File::seek(&this, offset: i32, whence: i32): i32 extern("fseek")

def File::open(path: string, mode: string): &File {
    let file = _c_fopen(path, mode)
    if not file? {
        println("Error opening file '%s': %s", path, strerror(errno))
        exit(1)
    }
    return file
}

def File::exists(path: string): bool {
    let file = _c_fopen(path, "r")
    if not file? {
        return false
    }
    file.close()
    return true
}

def File::size(&this): i32 {
    let pos = this.tell()
    this.seek(0, SEEK_END)
    let size = this.tell()
    this.seek(pos, SEEK_SET)
    return size
}

def File::slurp(&this): string {
    let pos = .tell()
    .seek(0, SEEK_END)
    let size = .tell()
    .seek(pos, SEEK_SET)
    let buf = calloc((size+1), sizeof(char))
    _c_fread(buf, 1, size, this)
    .seek(pos, SEEK_SET)
    return buf as string
}

def File::read(&this, buf: untyped_ptr, size: i32): i32 {
    return _c_fread(buf, 1, size, this)
}

def File::write(&this, buf: untyped_ptr, size: i32): i32 {
    return _c_fwrite(buf, 1, size, this)
}

def File::puts(&this, str: string) {
    _c_fwrite(str , 1, str.len(), this)
}

def exit(code: i32) exits extern
def panic(msg: string) exits {
    println("%s", msg)
    exit(1)
}

def string::len(this): i32 extern("strlen")
def string::compare(this, str2: string): i32 extern("strcmp")
def string::compare_n(this, str2: string, n: i32): i32 extern("strncmp")
def string::copy(this): string extern("strdup")
def string::concat(this, src: string): string extern("strcat")

def copy_memory(dest: untyped_ptr, src: untyped_ptr, size: i32) extern("memcpy")
def set_memory(ptr: untyped_ptr, val: u8, size: i32) extern("memset")


def string::starts_with(this, prefix: string): bool {
    let prefix_len = prefix.len()
    if .len() < prefix_len {
        return false
    }
    return .compare_n(prefix, prefix_len) == 0
}

def string::ends_with(this, suffix: string): bool {
    let suffix_len = suffix.len()
    if .len() < suffix_len {
        return false
    }
    return .compare_n(suffix, suffix_len) == 0
}

def string::remove_last_n(this, n: i32) {
    this[.len() - n] = '\0'
}

def string::eq(this, str2: string): bool => this.compare(str2) == 0

def string::substring(this, start: i32, len: i32): string {
    let new_str = calloc(len + 1, sizeof(char)) as string
    copy_memory(new_str, this + start, len)
    return new_str
}

def string::strip_trailing_whitespace(this) {
    for let i = .len() - 1; i >= 0; i -= 1 {
        if this[i] != ' ' break
        this[i] = '\0'
    }
}

def string::to_i32(this): i32 extern("atoi")

def strerror(errno: i32): string extern

def puts(str: string) extern
def system(str: string): i32 extern

def get_environment_variable(name: string): string extern("getenv")

def min(a: i32, b: i32): i32 => if a < b then a else b
def max(a: i32, b: i32): i32 => if a > b then a else b

/// Internal stuff

def _c_fopen(path: string, mode: string): &File extern("fopen")
def _c_fread(ptr: untyped_ptr, size: i32, num: i32, file: &File): i32 extern("fread")
def _c_fwrite(ptr: untyped_ptr, size: i32, num: i32, file: &File): i32 extern("fwrite")
