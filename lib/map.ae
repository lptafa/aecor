// A simple hash-map that maps strings to arbitrary objects.

struct MapNode {
    key: string
    value: untyped_ptr
    next: &MapNode
}

def MapNode::new(key: string, value: untyped_ptr, next: &MapNode): &MapNode {
    let node = calloc(1, sizeof(MapNode)) as &MapNode
    node.key = key
    node.value = value
    node.next = next
    return node
}

def MapNode::free_list(node: &MapNode) {
    let cur = node
    while cur? {
        let next = cur.next
        free(cur)
        cur = next
    }
}

struct Map {
    buckets: &&MapNode
    num_items: i32
    num_buckets: i32
    num_collisions: i32
}

def Map::new(): &Map {
    let map = calloc(1, sizeof(Map)) as &Map
    map.num_buckets = 4
    map.buckets = calloc(map.num_buckets, sizeof(&MapNode)) as &&MapNode
    return map
}

def Map::hash(&this, s: string): i32 {
    let hash = 5381
    let len = s.len()
    for let i = 0; i < len; i += 1 {
        hash = hash * 33 ^ s[i] as i32
    }
    hash = hash % .num_buckets
    if hash < 0 {
        hash += .num_buckets
    }
    return hash
}

def Map::get_node(&this, key: string): &MapNode {
    let hash = .hash(key)
    let node = .buckets[hash]
    while node? {
        if node.key.eq(key) {
            return node
        }
        node = node.next
    }
    return null
}

def Map::get(&this, key: string): untyped_ptr {
    let node = .get_node(key)
    if node? {
        return node.value
    }
    return null
}

def Map::exists(&this, key: string): bool {
    return .get_node(key)?
}

def Map::insert(&this, key: string, value: untyped_ptr) {
    let node = .get_node(key)
    if node? {
        node.value = value
    } else {
        let hash = .hash(key)
        let new_node = MapNode::new(key, value, .buckets[hash])
        if .buckets[hash]? {
            .num_collisions += 1
        }
        .buckets[hash] = new_node
        .num_items += 1
        if .num_items > .num_buckets {
            .resize()
        }
    }
}

def Map::resize(&this) {
    let old_buckets = .buckets
    let old_num_buckets = .num_buckets
    let old_num_items = .num_items
    .num_collisions = 0
    .num_buckets *= 2
    .buckets = calloc(.num_buckets, sizeof(&MapNode)) as &&MapNode
    for let i = 0; i < old_num_buckets; i += 1 {
        let node = old_buckets[i]
        while node? {
            let new_hash = .hash(node.key)
            let new_node = MapNode::new(node.key, node.value, .buckets[new_hash])
            if .buckets[new_hash]? {
                .num_collisions += 1
            }
            .buckets[new_hash] = new_node
            node = node.next
        }
    }
    for let i = 0; i < old_num_buckets; i += 1 {
        MapNode::free_list(old_buckets[i])
    }
    free(old_buckets)
}

def Map::print_keys(&this) {
    for let i = 0; i < .num_buckets; i += 1 {
        let node = .buckets[i]
        while node? {
            println("- '%s'\n", node.key)
            node = node.next
        }
    }
}

def Map::free(&this) {
    for let i = 0; i < .num_buckets; i += 1 {
        MapNode::free_list(.buckets[i])
    }
    free(.buckets)
}