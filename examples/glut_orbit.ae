use "./lib/glut.ae"


/// Math prereqs
@compiler c_include "math.h"
@compiler c_flag "-lm"

def cos(x: f32): f32 extern
def sin(x: f32): f32 extern

def myWireSphere(radius: f32, slices: i32, stacks: i32) {
  glPushMatrix()
  glRotatef(-90.0, 1.0, 0.0, 0.0)
  glutWireSphere(radius, slices, stacks)
  glPopMatrix()
}

let year: i32 = 0
let day: i32 = 0

def display() {
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
  glPushMatrix()

  glColor3f(1.0, 1.0, 0.0)
  myWireSphere(1.0, 15, 15)

  glRotatef(year as f32, 0.0, 1.0, 0.0)
  glTranslatef (2.0, 0.0, 0.0)
  glRotatef(day as f32, 0.0, 1.0, 0.0)
  glColor3f(0.0, 0.0, 1.0)
  myWireSphere(0.2, 15, 15)
  glColor3f(1.0, 1.0, 1.0)

  glBegin(GL_LINES)
    glVertex3f(0.0, -0.3, 0.0)
    glVertex3f(0.0, 0.3, 0.0)
  glEnd()

  glPopMatrix()
  glFlush()
  glutSwapBuffers()
}

let u: f32 = 0.0
let du: f32 = 0.1

def timer(v: i32) {
  u += du
  day = (day + 1)
  if day > 359 {
    day = 0
  }
  year = (year + 2)
  if year > 359 {
    year -= 360
  }
  glLoadIdentity()
  gluLookAt(
    20.0 * cos(u/8.0) + 12.0,
     5.0 * sin(u/8.0) +  1.0,
    10.0 * cos(u/8.0) +  2.0,
    0.0,0.0,0.0,
    0.0,1.0,0.0
  )
  glutPostRedisplay()
  glutTimerFunc(1000/60, timer, v)
}

def reshape(w: i32, h: i32) {
  glViewport(0, 0, w, h)
  glMatrixMode(GL_PROJECTION)
  glLoadIdentity()
  gluPerspective(60.0, w as f32 / h as f32, 1.0, 40.0)
  glMatrixMode(GL_MODELVIEW)
}


def main(argc: i32, argv: &string) {
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH)
  glutInitWindowSize(800, 600)
  glutCreateWindow("On a Comet")
  glutDisplayFunc(display)
  glutReshapeFunc(reshape)
  glutTimerFunc(100, timer, 0)
  glEnable(GL_DEPTH_TEST)
  glutMainLoop()
}